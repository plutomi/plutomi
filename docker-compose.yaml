networks:
  kafka:
    driver: bridge

services:
  mongodb:
    image: mongo:7.0.8
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo_data:/data/mongodb

  kafka:
    image: "bitnami/kafka:latest"
    networks:
      - kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes:
      - kafka_data:/data/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks:
      - kafka
    ports:
      - "9000:8080" # Expose Kafka UI on port 8080
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092" # Point to Kafka broker within the Docker network
      KAFKA_CLUSTERS_0_ZOOKEEPER: "kafka:9093" # Kafka UI doesn't need Zookeeper in KRaft mode but this can remain
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: "PLAINTEXT" # Use PLAINTEXT for communication with Kafka

volumes:
  mongo_data:
    driver: local
  kafka_data:
    driver: local

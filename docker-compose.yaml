networks:
  kafka:
    driver: bridge

services:
  mongodb:
    image: mongo:7.0.8
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo_data:/data/mongodb

  kafka:
    image: bitnami/kafka:latest
    networks:
      - kafka
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_data:/data/kafka

  topic-creator:
    image: bitnami/kafka:latest
    networks:
      - kafka
    depends_on:
      - kafka
    entrypoint: >
      /bin/bash -c " \
      echo 'Waiting for Kafka to be reachable...'; \
      while ! /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list > /dev/null 2>&1; do \
        echo 'Kafka is not reachable yet, retrying...'; \
        sleep 5; \
      done; \
      echo 'Kafka is reachable, creating topics...'; \
      topics=(test test-retry test-dlq); \
      for topic in $${topics[@]}; do \
        /opt/bitnami/kafka/bin/kafka-topics.sh --create --topic $${topic} --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 && echo \"Topic $${topic} created or already exists.\"; \
      done; \
      echo 'Successfully created all topics.' \
      "
    restart: "no"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks:
      - kafka
    ports:
      - "9000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: "PLAINTEXT"
    depends_on:
      - kafka
volumes:
  mongo_data:
    driver: local
  kafka_data:
    driver: local
